<?php

/**
 * @file
 * Holds hook implementation for the Message Group Notify module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function message_group_notify_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the message_group_notify module.
    // @todo add routes
    case 'help.page.message_group_notify':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Notifies groups on entity creation or update.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_operation().
 */
function message_group_notify_entity_operation(EntityInterface $entity) {
  $operations = [];
  $info = $entity->getEntityType();

  if ($info->getBundleOf() == 'node') {
    $account = \Drupal::currentUser();

    if ($account->hasPermission('administer nodes') && $account->hasPermission('administer content types')) {
      $operations['message-group-notify'] = [
        'title' => t('Group notify'),
        'weight' => 99,
        'url' => Url::fromRoute('entity.node_type.message_group_notify', [
          'node_type' => $entity->id(),
        ]),
      ];
    }
  }

  return $operations;
}

/**
 * Implements hook_theme().
 */
function message_group_notify_theme() {
  return [
    'message_group_notify' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_entity_insert().
 */
function message_group_notify_entity_insert(EntityInterface $entity) {
  /** @var \Drupal\message_group_notify\EntitySubscriber $subscriber */
  $subscriber = \Drupal::service('message_group_notify.entity_subscriber');
  $subscriber->onCreate($entity);
}

/**
 * Implements hook_entity_update().
 */
function message_group_notify_entity_update(EntityInterface $entity) {
  /** @var \Drupal\message_group_notify\EntitySubscriber $subscriber */
  $subscriber = \Drupal::service('message_group_notify.entity_subscriber');
  $subscriber->onUpdate($entity);
}

/**
 * Implements hook_entity_update().
 */
function message_group_notify_entity_delete(EntityInterface $entity) {
  /** @var \Drupal\message_group_notify\EntitySubscriber $subscriber */
  $subscriber = \Drupal::service('message_group_notify.entity_subscriber');
  $subscriber->onDelete($entity);
}

/**
 * Return message_group_notify's settings.
 *
 * @param string $setting
 *   One of the message_group_notify_available_settings(), e.g. 'per_node'.
 *   If 'all' is passed, all available settings are returned.
 * @param string $type_name
 *   The name of the content type to return settings for.
 *
 * @return string|array
 *   The value of the given setting or an array of all settings.
 */
function message_group_notify_get_settings($setting, $type_name) {
  $config = \Drupal::configFactory()->getEditable('message_group_notify.settings');
  $settings = unserialize($config->get('message_group_notify_node_type.' . $type_name));
  if (empty($settings)) {
    $settings = [];
  }
  $settings += message_group_notify_get_setting_defaults($type_name);

  if ($setting == 'all') {
    return $settings;
  }

  return isset($settings[$setting]) ? $settings[$setting] : NULL;
}

/**
 * Save message_group_notify settings of a content type.
 */
function message_group_notify_set_settings($settings, $type_name) {
  $config = \Drupal::configFactory()->getEditable('message_group_notify.settings');

  // Do not store default values.
  // @todo to review
  foreach (message_group_notify_get_setting_defaults($type_name) as $setting => $default_value) {
    if (isset($settings[$setting]) && $settings[$setting] == $default_value) {
      unset($settings[$setting]);
    }
  }
  $config->set('message_group_notify_node_type.' . $type_name, serialize($settings));
  $config->save();
}

/**
 * Return an array containing all available message_group_notify settings.
 */
function message_group_notify_available_settings() {
  return [
    'groups',
    'send_mode',
    'operations',
    'channels',
  ];
}

/**
 * Defines default values for settings.
 */
function message_group_notify_get_setting_defaults($type) {
  $defaults = [];
  $defaults['groups'] = [];
  $defaults['send_mode'] = 'send_per_node';
  $defaults['operations'] = ['create'];
  $defaults['channels'] = ['mail'];

  return $defaults;
}
